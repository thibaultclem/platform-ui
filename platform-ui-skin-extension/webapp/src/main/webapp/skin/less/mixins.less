@import "../bootstrap/less/mixins.less";

// UTILITY MIXINS
// --------------------------------------------------



// FONTS
// --------------------------------------------------

#font {
  #family {
   
  .sans-serif-bold() {
      font-family: @sansBoldFontFamily;
    }
   
  }
 
  .sans-serif-bold(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
    #font > #family > .sans-serif-bold;
    #font > .shorthand(@size, @weight, @lineHeight);
  }

  
}


// Mixin for form field states
.formFieldState(@textColor: #555, @borderColor: #ccc, @backgroundColor: #f5f5f5) {
  // Set the text color
  > label,
  .help-block,
  .help-inline {
    color: @textColor;
  }

}


// Gradients
#gradient {
   .vertical-three-colors(@startColor: #00b3ee, @midColor: #7a43b6, @colorStop: 50%, @endColor: #c3325f) {
    background-color: mix(@midColor, @endColor, 80%);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@startColor), color-stop(@colorStop, @midColor), to(@endColor));
    background-image: -webkit-linear-gradient(@startColor, @midColor @colorStop, @endColor);
    background-image: -moz-linear-gradient(top, @startColor, @midColor @colorStop, @endColor);
    background-image: -o-linear-gradient(@startColor, @midColor @colorStop, @endColor);
    background-image: linear-gradient(@startColor, @midColor @colorStop, @endColor);
    background-repeat: no-repeat;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@startColor),argb(@endColor))); // IE9 and down, gets no color-stop at all for proper fallback
  }
 
}

//============== Status Elements================

#StatusElements {
  .StatusHover(@startColor : #fff, @endColor : #f1f1f1,@boxShadow: 0 1px 2px 0px rgba(255,255,255,1)){
    #gradient > .vertical(@startColor,@endColor);
    border: 1px solid @borderColor;
    .border-radius(@borderRadiusSmall);
    .box-shadow(@boxShadow);
    &:active,&:focus {
      .StatusActive();
    }
  }
  .StatusActive(@boxShadow: 0px 2px 6px 0 rgba(0, 0, 0, 0.15) inset) {
    .box-shadow(@boxShadow);
    border: 1px solid #c7c7c7;
    .border-radius(@borderRadiusSmall);
    background-color: #ececec;
  }
}

//============== Action With Label================

.uiActionWithLabel(){
  border: 1px solid transparent;
  cursor: pointer;
  display: inline-block;
  padding: 3px 8px;
  line-height: @baseLineHeight;
  &:hover {
    #StatusElements .StatusHover();
  }
  .uiIconMiniArrowDown{
    margin-left: 5px;
  }
}

//============== actionIcon================
.actionContainer() {
  white-space: nowrap;
}

.actionIcon(){
  .uiActionWithLabel;
  padding:2px 4px;
  vertical-align: middle;
  &:active,&:focus,&.active {
    #StatusElements > .StatusActive(0px 0px 10px 0 rgba(0, 0, 0, 0.15) inset);
  }
}


//============== error, noticeEmpty ================

.error() {
  color: @red;
}
.noticeEmpty() {
  color: @red;
}

.noticeEmpty() {
  color: @grayLight;
}

//======== Title================
.title(@color: @textColor,@shadowColor: #cdcdcd,@fonSize : 18px,@fontWeight: @headingsFontWeight,@lineHeight: @baseLineHeight) {
  color: @color;
  #font > .sans-serif-bold(@fonSize,@fontWeight,@lineHeight);
  text-shadow: 0px 0px 1px @shadowColor ;
}

.titleWithBorder() {
  position: relative;
  overflow: hidden;
  &:after {
    border-bottom: 1px solid #dadada;
    height: 11px;
    content: "";
    position: absolute;
    width: 100%;
    margin-left: 10px;
  }
}

//=======uibox=======

.uiBox() {
  .border-radius(@baseBorderRadius);
  .box-shadow(0px 2px 4px -1px rgba(35,44,48,0.18));
  border: 1px solid @uiBoxBorder;
  background: @uiBoxBg;
  margin: 0 0 @baseLineHeight 0;
  .title {
    background-color:  @uiBoxHeadBg;
    border-bottom: 1px solid @borderColor;
    .box-shadow(0 1px 2px rgba(13, 13, 13, 0.2));
    .border-radius(@baseBorderRadius @baseBorderRadius 0 0);
    padding: 8px 10px;
    line-height: @baseLineHeight;
    margin: 0;
    word-wrap: break-word;
    .actionIcon {
      margin: -3px 0;
    }
  }
  .uiContentBox {
    padding: 20px;
    & + .title {
  	    .border-radius(0);
 	  	 border-top: 1px solid @borderColor;
		}
  }
  &.roundedBottom {
    .border-radius(0 0 @baseBorderRadius @baseBorderRadius);
    .title {
      .border-radius(0);
    }
  }
  &.roundedTop {
    .border-radius(@baseBorderRadius @baseBorderRadius 0 0);
  }
  &.uiGrayLightBox {
    background: @uiBoxGray;
  }
  &.noRounded {
    .border-radius(0);
    .title {
      .border-radius(0);
    }
  }
}



//============== Gray Light Box ================

.uiGrayLightBox(){
  padding: @gutterSizeBase;
  border: 1px solid @borderColor;
  background: @uiBoxGray;
  .border-radius(@baseBorderRadius);
  .box-shadow(0px 1px 2px rgba(0,0,0,.06));
  label {
    display: inline-block;
  }
  input {
    margin-bottom: 0px;
  }
}

.center() {
  text-align: center;
}

//==================== AVATAR ==================

.circleBorderAvatar(@size) {
  #gradient .vertical(@white, @componentBackground);
  .square(@size);
  .border-radius(100px);
  .box-shadow(0px 2px 4px rgba(13px, 13px, 13px, 0.27));
  border: 1px solid #b1b1b1;
  padding: 5px;

  img {
    .border-radius(100px);
    .square(@size);
  }
}

.roundedCornerAvatar(@size, @radius) {
  .square(@size);
  img {
    .border-radius(@radius);
    .square(@size);
  }
}

/***
	- avatarCircle will be replaced by avatarCircle40x40. It is for circle avatar 40px 40px
	- define size 32x32 and 24x24 for circle avatar. Still now, we will use these class names for compatible avatars:
		avatarCircle32x32 for circle avatar 32px 32px
		avatarCircle24x24 for circle avatar 24px 24px 
***/

.avatarCircle() { 
  .circleBorderAvatar(40px);
}

.avatarCircle40x40() {
  .circleBorderAvatar(40px);
}

.avatarCircle32x32() {
  .circleBorderAvatar(32px);
}

.avatarCircle24x24() {
  .circleBorderAvatar(24px);
}

.avatarXLarge() {
  .roundedCornerAvatar(120px, 4px);
}

.avatarLarge() {
  .roundedCornerAvatar(100px, 4px);
}

.avatarXMedium() {
  .roundedCornerAvatar(75px, 4px);
}

.avatarMedium() {
  .roundedCornerAvatar(50px, 3px);
}

.avatarXSmall() {
  .roundedCornerAvatar(36px, 2px);
}

.avatarSmall() {
  .roundedCornerAvatar(26px, 2px);
}

.avatarMini() {
  .roundedCornerAvatar(20px, 2px);
}

.avatarTiny() {
  .roundedCornerAvatar(16px, 2px);
}

.squareBorderAvatar(@size) {
  #gradient .vertical(@white, @componentBackground);
  .square(@size);
  .border-radius(4px);
  .box-shadow(0px 2px 4px rgba(13px, 13px, 13px, 0.27));
  border: 1px solid @borderColor;
  padding: 7px;
  display: block;

  img {
    .border-radius(4px);
    .square(@size);
  }
}

.avatarLargeWithBorder() {
  .squareBorderAvatar(100px);
}

.avatarXLargeWithBorder() {
  .squareBorderAvatar(120px);
}


// ====================Round Corner====================
.roundCornerBoxWithTitle() {
  background: @white;
  border: 1px solid @borderColor;
  .border-radius(4px);
  .box-shadow(0px 1px 2px rgba(0, 0, 0, 0.08));

  .titleBox {
    .border-radius(4px 4px 0px 0px );
    .box-shadow(0px 1px 2px rgba(13, 13, 13, 0.08));
    background: @componentBackground;
    border-bottom: 1px solid @borderColor;
    margin: 0px;
    line-height: @baseLineHeight ;
    font-weight: @headingsFontWeight;
    color: @grayDark;
    padding: 8px 10px;
    word-wrap: break-word;
  }
}

//=====Create Margin And Padding Utilities Class=====
.marginAndPadding(@index, @countDown: 5)
{

  // LOOP
  .style_margin_padding (@index) when (@index >= 0) {

    // Padding
    (~".pd@{index}") {padding: ~"@{index}px";}
    (~".pdT@{index}") {padding-top: ~"@{index}px";}
    (~".pdR@{index}") {padding-right: ~"@{index}px";}
    (~".pdB@{index}") {padding-bottom: ~"@{index}px";}
    (~".pdL@{index}") {padding-left: ~"@{index}px";}

    // Padding Important
    (~".pd@{index}-ipt") {padding: ~"@{index}px!important";}
    (~".pdT@{index}-ipt") {padding-top: ~"@{index}px!important";}
    (~".pdR@{index}-ipt") {padding-right: ~"@{index}px!important";}
    (~".pdB@{index}-ipt") {padding-bottom: ~"@{index}px!important";}
    (~".pdL@{index}-ipt") {padding-left: ~"@{index}px!important";}

    // Padding Horizatial
    (~".pd-0-@{index}") {padding: 0 ~"@{index}px";}
    (~".pd-0-@{index}-ipt") {padding: 0 ~"@{index}px!important";}


    // Padding Vertical
    (~".pd-@{index}-0") {padding: ~"@{index}px" 0;}
    (~".pd-@{index}-0-ipt") {padding: ~"@{index}px" 0!important;}

    //-----------------------------------------------------------------
    // Margin
    (~".mg@{index}") {margin: ~"@{index}px";}
    (~".mgT@{index}") {margin-top: ~"@{index}px";}
    (~".mgR@{index}") {margin-right: ~"@{index}px";}
    (~".mgB@{index}") {margin-bottom: ~"@{index}px";}
    (~".mgL@{index}") {margin-left: ~"@{index}px";}
    // Margin Important
    (~".mg@{index}-ipt") {margin: ~"@{index}px!important";}
    (~".mgT@{index}-ipt") {margin-top: ~"@{index}px!important";}
    (~".mgR@{index}-ipt") {margin-right: ~"@{index}px!important";}
    (~".mgB@{index}-ipt") {margin-bottom: ~"@{index}px!important";}
    (~".mgL@{index}-ipt") {margin-left: ~"@{index}px!important";}

    // margin Horizatial
    (~".mg-0-@{index}") {margin: 0 ~"@{index}px";}
    (~".mg-0-@{index}-ipt") {margin: 0 ~"@{index}px!important";}

    // margin Vertical

    (~".mg-@{index}-0") {margin: ~"@{index}px" 0;}
    (~".mg-@{index}-0-ipt") {margin: ~"@{index}px" 0!important;}

    // next iteration
    .style_margin_padding(@index - @countDown);

  }
  // end the loop when index is 0
  .style_margin_padding (0) {}
  // "call" the loopingClass the first time with highest value
  .style_margin_padding (@index);
}